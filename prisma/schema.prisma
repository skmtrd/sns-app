// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  name      String
  email     String   @unique
  introduction String @db.Text
  posts     Post[]
  tags      Tag[]
  assignment Assignment[]
  assignmentReply AssignmentReply[]
  question  Question[]
  questionReply  QuestionReply[]
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Assignment {
  id        String   @id @default(cuid())
  title     String 
  description String @db.Text
  deadLine  DateTime 
  reply     AssignmentReply? @relation(fields: [replyId] , references: [id]) 
  replyId   String?  @unique
  author    User     @relation(fields: [authorId], references: [id]) 
  authorId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model AssignmentReply {
  id        String   @id @default(cuid())
  title     String 
  description String @db.Text
  assignment Assignment?
  parentReply     AssignmentReply?  @relation("ParentChildReply", fields: [parentReplyId], references: [id])
  parentReplyId   String?
  childReplies    AssignmentReply[] @relation("ParentChildReply")
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Question {
  id        String   @id @default(cuid())
  title     String 
  description String @db.Text 
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @unique
  reply     QuestionReply? @relation(fields: [replyId] , references: [id])
  replyId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionReply {
  id        String   @id @default(cuid())
  title     String 
  description String @db.Text 
  question  Question?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @unique
  parentReply     QuestionReply?  @relation("ParentChildReply", fields: [parentReplyId], references: [id])
  parentReplyId   String?
  childReplies    QuestionReply[] @relation("ParentChildReply")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}