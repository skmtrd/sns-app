// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  postReplies PostReply[]
  tags      Tag[]
  likes     Like[]
  likeReplys     LikeReply[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
// model User {
//   id        String   @id @default(cuid())
//   clerkId   String   @unique
//   name      String
//   email     String   @unique
//   introduction String @db.Text
//   posts     Post[] 
//   postReplies PostReply[]
//   tags      Tag[]
//   likes     Like[]
//   likeReplys     LikeReply[]
//   assignment Assignment[]
//   assignmentReply AssignmentReply[]
//   question  Question[]
//   questionReply  QuestionReply[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Post {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  likes Like[] 
  replies   PostReply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostReply {
  id        String   @id @default(cuid())
  content   String   @db.Text
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  parentReply     PostReply?  @relation("ParentChildReply", fields: [parentReplyId], references: [id])
  parentReplyId   String?
  likeReplys     LikeReply[]
  childReplies    PostReply[] @relation("ParentChildReply")
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Like {
  id          String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   
  post  Post? @relation(fields: [postId] , references: [id])
  postId String?
  // assignment  Assignment? @relation(fields: [assignmentId] , references: [id])
  assignmentId String?
  // question  Question? @relation(fields: [questionId] , references: [id])
  questionId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId , postId])
  @@unique([userId , assignmentId])
  @@unique([userId , questionId])
}

model LikeReply {
  id String @id @default(cuid())
  user User @relation(fields: [userId] , references: [id])
  userId String 
  postReply PostReply? @relation(fields: [postReplyId] , references: [id])
  postReplyId String?
  // assignmentReply AssignmentReply? @relation(fields: [assignmentReplyId] , references: [id])
  assignmentReplyId String?
  // questionReply QuestionReply? @relation(fields: [questionReplyId] , references: [id])
  questionReplyId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId , postReplyId])
  @@unique([userId , assignmentReplyId])
  @@unique([userId , questionReplyId])
}


model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// model Assignment {
//   id        String   @id @default(cuid())
//   title     String 
//   description String @db.Text
//   deadLine  String 
//   likes Like[] 
//   replies   AssignmentReply[]
//   author    User     @relation(fields: [authorId], references: [id]) 
//   authorId  String   
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

// }


// model AssignmentReply {
//   id        String   @id @default(cuid())
//   content   String   @db.Text
//   likeReplys     LikeReply[]
//   assignment Assignment @relation(fields: [assignmentId], references: [id])
//   assignmentId String
//   parentReply     AssignmentReply?  @relation("ParentChildReply", fields: [parentReplyId], references: [id])
//   parentReplyId   String?
//   childReplies    AssignmentReply[] @relation("ParentChildReply")
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  String   
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }


// model Question {
//   id          String         @id @default(cuid())
//   title       String 
//   description String         @db.Text 
//   author      User           @relation(fields: [authorId], references: [id])
//   authorId    String
//   likes Like[] 
//   replies     QuestionReply[]
//   createdAt   DateTime       @default(now())
//   updatedAt   DateTime       @updatedAt

// }

// model QuestionReply {
//   id             String         @id @default(cuid())
//   content        String         @db.Text 
//   likeReplys     LikeReply[]
//   question       Question       @relation(fields: [questionId], references: [id])
//   questionId     String
//   author         User           @relation(fields: [authorId], references: [id])
//   authorId       String
//   parentReply    QuestionReply? @relation("ParentChildReply", fields: [parentReplyId], references: [id])
//   parentReplyId  String?
//   childReplies   QuestionReply[] @relation("ParentChildReply")
//   createdAt      DateTime       @default(now())
//   updatedAt      DateTime       @updatedAt
// }
